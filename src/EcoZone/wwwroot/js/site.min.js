'use strict';

var app = angular.module('ecoZone',
[
    "ngRoute",
    "ngMaterial",
    "LocalStorageModule",
    "ngResource",
    "ui.router",
    "ngCookies",
    "ngProgress",
    "ngMessages"
]);
app.config(routes);

function routes($stateProvider, $httpProvider, $urlRouterProvider) {
    
    $httpProvider.interceptors.push("authInterceptorService");
    
    var auth = function ($q, authService) {
        authService.fillAuthData();
        if (authService.authentication.isAuth) {
            return $q.when(authService.authentication);
        } else {
            return $q.reject({authenticated: false});
        }
    };

    $urlRouterProvider.otherwise("/");

    $stateProvider
        .state("main", {
            url: "/",
            templateUrl: "/home/index",
            controller: "mainController",
            abstract: true
        })
        .state("login", {
            url: "/login",
            templateUrl: "../app/account/login.html",
            controller: "loginController"
        })
        .state("signup", {
            url: "/signup",
            templateUrl: "../app/account/signup.html",
            controller: "signupController"
        })
        .state("profile", {
            url: "/profile/:id",
            templateUrl: "../app/profile.html",
            controller: "profileController",
            resolve: {
                auth: auth
            }
        })
        .state("users", {
            url: "/users",
            templateUrl: "../app/users.html",
            controller: "userController"
        })
        .state("settings", {
            url: "/settings",
            templateUrl: "../app/settings.html"
        })
        .state("help", {
            url: "/help",
            templateUrl: "../app/help.html"
        })
        .state("news", {
            url: "/news",
            templateUrl: "../app/news.html",
            controller: "newsController"
        })
        .state("history", {
            url: "/history",
            templateUrl: "../app/history.html",
            controller: "historyController"
        })
        .state("about", {
            url: "/about",
            templateUrl: "../app/about.html",
            controller: "aboutController"
        });
}
app.run(run).config(config);

function run($rootScope, $window, $state, authService) {

    $rootScope.$on("$stateChangeStart", function (event, toState) {
        authService.fillAuthData();
        if (toState.name == "admin") {
            var isAdmin = false;
            angular.forEach(authService.authentication.roles, function (role) {
                if (role == "Admin")
                    isAdmin = true;
            });
            if (!isAdmin) {
                event.preventDefault();
                $state.go("profile", { profileId: authService.authentication.id });
            }
        }
        if (toState.external) {
            event.preventDefault();
            $window.open(toState.url, "_self");
        }
    });

    $rootScope.$on("$stateChangeSuccess", function (event, toState) {
        if (toState.external) {
            event.preventDefault();
            $window.open(toState.url, "_self");
        }
    });

    $rootScope.$on("$stateChangeError", function () {
    });

    authService.fillAuthData();
}

function config($provide, $mdThemingProvider) {
    $provide.decorator("$locale", function ($delegate) {
        return $delegate;
    });

    $mdThemingProvider.definePalette('ecoZonePalette', {
        '50': 'FAFAFA',
        '100': 'F5F5F5',
        '200': 'EEEEEE',
        '300': 'E0E0E0',
        '400': 'BDBDBD',
        '500': '9E9E9E',
        '600': '757575',
        '700': '616161',
        '800': '424242',
        '900': '000000',
        'A100': '000000',
        'A200': '000000',
        'A400': '000000',
        'A700': '000000',
        'contrastDefaultColor': '000000',

        'contrastDarkColors': ['50', '100', '200', '300', '400'],
        'contrastLightColors': 'FFFFFF'
    });

    $mdThemingProvider.theme("default")
        .primaryPalette("ecoZonePalette", {
            'default': "900",
            'hue-1': "100",
            'hue-2': "600"
        })
        .warnPalette("red");
}
// Write your Javascript code.

app.controller("aboutController", aboutController);

function aboutController($scope) {

}
app.controller("newshistoryController", newshistoryController);

function newshistoryController($scope) {

}
app.controller("loginController", loginController);

function loginController($scope, $state, authService) {
    $scope.title = "Вход";
    $scope.activeLoeder = false;
    
    authService.logOut();

    $scope.loginData = {
        email: "",
        password: ""
    };

    $scope.validation = {
        email: /^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/
    };

    $scope.login = function () {
        if ($scope.loginForm.$valid) {
            $scope.activeLoader = true;
            authService.login($scope.loginData,
                function (result) {
                    if (result == "OK") {
                        $scope.message = "Вход прошел успешно.";
                        $scope.activeLoader = false;
                        $state.go("profile", {profileId: authService.authentication.id});
                    } else {
                        $scope.activeLoader = false;
                    }
                });
        }
    };
}
app.controller('mainController', mainController);

function mainController($scope, $mdDialog, $mdSidenav, authService, $state) {
    $scope.title = 'EcoZone';
    $scope.description = 'экологический портал';

    $scope.showSearchDialog = function (ev) {
        var confirm = $mdDialog.prompt()
          .title('Поиск')
          .textContent('Введите текст или слово для поиска')
          .placeholder('Поиск...')
          .targetEvent(ev)
          .ok('Поиск!')
          .cancel('Отмена');

        $mdDialog.show(confirm).then(function (result) {
            $scope.status = 'You decided to name your dog ' + result + '.';
        }, function () {
            $scope.status = 'You didn\'t name your dog.';
        });
    };

    $scope.toggleSideNav = toggleSideNav("sideNav");

    function toggleSideNav() {
        return function () {
            $mdSidenav('sideNav')
                .toggle();
        };
    }

    $scope.close = function () {
        $mdSidenav('sideNav').close();
    };

    $scope.logOut = function () {
        $mdSidenav('sideNav').close();
        authService.logOut();
        $state.go("login");
    };

    $scope.authentication = authService.authentication;

    $scope.$on("$stateChangeError", function () {
        $state.go("login");
    });
}
app.controller("newsController", newsController);

function newsController($scope, newsService) {
    $scope.title = "Новости";

    $scope.news = [];

    newsService.getNews(function (data) {
        $scope.news = data;
    });
}
app.controller("profileController", profileController);

function profileController($scope, $state, $stateParams, authService, profileService, $mdDialog, $mdToast) {
    $scope.profile = {};
    $scope.image = null;
    var profileId = $stateParams.profileId;

    profileService.getProfile(profileId, function (data) {
        if (data != "Пльзователь не найден.") {
            $scope.profile = data;
            $scope.image = data.photo == null ? null : "data/profile_photos/" + data.photo;
        } else {
            $state.go("Admin");
            $mdToast.show($mdToast.simple().textContent(data).position('bottom right').hideDelay(3000));
        }
    });

    $scope.getRole = function (role) {
        switch (role) {
            case "Admin":
                return "Администратор";
            case "User":
                return "Пользователь";
            case "Author":
                return "Автор";
            case "Moderator":
                return "Модератор";
        }
    };

    $scope.isCurrent = function () {
        var currentProfileId = authService.authentication.id;
        return profileId == currentProfileId || profileId == "";
    };

    $scope.isAdmin = function () {
        var isAdmin = false;
        angular.forEach($scope.profile.roles, function (role) {
            if (role == "Admin") {
                isAdmin = true;
            }
        });
        return isAdmin;
    };

    $scope.isUser = function () {
        var isUser = false;
        angular.forEach($scope.profile.roles, function (role) {
            if (role == "User") {
                isUser = true;
            }
        });
        return isUser;
    };

    $scope.showProfileImageModal = function (ev) {
        $mdDialog.show({
            controller: 'ProfileImageLoaderController',
            templateUrl: '../app/partials/profileImageLoaderView.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: false,
            fullscreen: false
        }).then(
            function (response) {
                $scope.image = response;
            });
    };
}
app.controller("signupController", signupController);

function signupController($scope, $state, $element, authService) {
    $scope.title = "Регистрация";
    $scope.savedSuccessfully = false;
    $scope.message = "";
    $scope.activeLoader = false;

    $scope.registration = {
        firstName: "",
        lastName: "",
        email: "",
        password: "",
        confirmPassword: ""
    };

    $scope.validation = {
        email: /^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/
    };

    $scope.signUp = function () {
        if ($scope.signUpForm.$valid) {
            $scope.activeLoader = true;
            authService.signUp($scope.registration,
                function (result) {
                    if (result == "OK") {
                        $scope.message = "Регистрация прошла успешно.";
                        $scope.activeLoader = false;
                        $state.go("profile", {profileId: authService.authentication.id});
                    } else {
                       $scope.activeLoader = false;
                    }
                });
        }
    };
}
app.controller("userController", userController);
function userController($scope) {

}
app.factory("authInterceptorService", authInterceptorService);

function authInterceptorService($q, $location, localStorageService) {
    var authInterceptorServiceFactory = {};
    var request = function (config) {
        config.headers = config.headers || {};
        var authData = localStorageService.get("authorizationData");
        if (authData) {
            config.headers.Authorization = "Bearer " + authData.token;
        }
        return config;
    };

    var responseError = function (rejection) {
        if (rejection.status == 401) {
            $location.path("/");
        }
        return $q.reject(rejection);
    };

    authInterceptorServiceFactory.request = request;
    authInterceptorServiceFactory.responseError = responseError;

    return authInterceptorServiceFactory;
}
app.factory("authService", authService);

function authService($http, $cookies, localStorageService) {
    var authServiceFactory = {};

    var authentication = {
        id: "",
        isAuth: false,
        email: "",
        roles: []
    };

    var logOutFromServer = function () {
        return $http({
            url: "/api/account/logout",
            method: "POST"
        }).then(
            function successCallback(response) {
            }, function errorCallback(response) {
            }
        );
    };

    var logOut = function () {
        localStorageService.remove("authorizationData");
        if (authentication.isAuth)
            logOutFromServer();
        authentication.isAuth = false;
        authentication.id = "";
        authentication.email = "";
        authentication.roles = [];
    };

    var signUp = function (model, callback) {
        logOut();
        return $http({
            url: "/api/account/register",
            dataType: "json",
            method: "POST",
            data: JSON.stringify(model),
            headers: {
                "Content-Type": "application/json"
            }
        }).then(
            function successCallback(response) {
                if (response.data != "Неверные данные." && response.data != "Неверный тип." && response.data != "При регистрации произошла ошибка.") {
                    $cookies.put("access_token", response.data.email);
                    localStorageService.set("authorizationData", {
                        token: response.access_token,
                        id: response.data.id,
                        email: response.data.email,
                        roles: response.data.roles
                    });
                    authentication.isAuth = true;
                    authentication.id = response.data.id;
                    authentication.email = response.data.email;
                    authentication.roles = response.data.roles;
                    callback("OK");
                } else {
                    callback(response.data);
                }
            }, function errorCallback(error) {
                logOut();
                callback(error);
            }
        );
    };

    var login = function (model, callback) {
        logOut();
        $http({
            url: "/api/account/login",
            dataType: "json",
            method: "POST",
            data: JSON.stringify(model),
            headers: {
                "Content-Type": "application/json"
            }
        }).then(
            function successCallback(response) {
                if (response.data != "Неверные данные." && response.data != "При входе произошла ошибка.") {
                    $cookies.put("access_token", response.data.email);
                    localStorageService.set("authorizationData", {
                        token: response.access_token,
                        id: response.data.id,
                        email: response.data.email,
                        roles: response.data.roles
                    });
                    authentication.isAuth = true;
                    authentication.id = response.data.id;
                    authentication.email = response.data.email;
                    authentication.roles = response.data.roles;
                    callback("OK");
                } else {
                    callback(response.data);
                }
            }, function errorCallback(error) {
                logOut();
                callback(error);
            }
        );
    };

    var fillAuthData = function () {
        var authData = localStorageService.get("authorizationData");
        var authCookie = $cookies.get("access_token");
        if (authData && authCookie) {
            authentication.isAuth = true;
            authentication.id = authData.id;
            authentication.email = authData.email;
            authentication.roles = authData.roles;
        }
    };

    authServiceFactory.signUp = signUp;
    authServiceFactory.login = login;
    authServiceFactory.logOut = logOut;
    authServiceFactory.fillAuthData = fillAuthData;
    authServiceFactory.authentication = authentication;

    return authServiceFactory;
}
app.factory("newsService", newsService);

function newsService($http) {
    return {
        getNews: function (callback) {
            $http.get("/api/news").then(function successCallback(response) {
                callback(response.data);
            }, function errorCallback(error) {
                console.error("Problem with getting news from the server" + error);
            });
        }
    };
}
app.factory("profileService", profileService);

function profileService($http) {
    return {
        getProfile: function (profileId, callback) {
            $http.get("/api/profile/" + profileId).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with getting profile data from the server" + error);
                }
            );
        },
        uploadImage: function (image, callback) {
            $http({
                url: "/api/image/uploadProfileImage",
                method: "POST",
                data: image,
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
            }).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with getting profile data from the server" + error);
                }
            );
        }
    };
}
app.controller("ProfileImageLoaderController", ProfileImageLoaderController);

function ProfileImageLoaderController($scope, $mdDialog, $mdToast, FileUploader) {
    $scope.imageUrl = '';

    $scope.uploader = new FileUploader({
        url: '/api/image/uploadProfileImage',
        onAfterAddingFile: function (item) {
            $scope.imageUrl = URL.createObjectURL(item._file);
        },
        onSuccessItem: function (item, response) {
            if (response == "Uploaded") {
                $mdToast.show($mdToast.simple().textContent("Загружено").position('bottom right').hideDelay(3000));
            } else if (response == "Incorrect file extension") {
                $mdToast.show($mdToast.simple().textContent("Некорректный формат файла").position('bottom right').hideDelay(3000));
            } else {
                $mdToast.show($mdToast.simple().textContent("При загрузке произошла ошибка").position('bottom right').hideDelay(3000));
            }
        },
        onErrorItem: function (item, response) {
            $mdToast.show($mdToast.simple().textContent("При загрузке произошла ошибка").position('bottom right').hideDelay(3000));
        }
    });

    $scope.cancel = function () {
        $scope.uploader.clearQueue();
        $mdDialog.cancel();
    };

    $scope.answer = function () {
        $scope.uploader.queue[0].upload();
        $mdDialog.hide($scope.imageUrl);
    };
}